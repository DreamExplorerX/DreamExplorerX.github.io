<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>A Neural Probabilistic Language Model</title>
    <link href="/2020/07/19/A-Neural-Probabilistic-Language-Model/"/>
    <url>/2020/07/19/A-Neural-Probabilistic-Language-Model/</url>
    
    <content type="html"><![CDATA[<h1 id="A-Neural-Probabilistic-Language-Model"><a href="#A-Neural-Probabilistic-Language-Model" class="headerlink" title="A Neural Probabilistic Language Model"></a>A Neural Probabilistic Language Model</h1><p>​    本<a href="http://www.jmlr.org/papers/volume3/bengio03a/bengio03a.pdf" target="_blank" rel="noopener">paper</a>由深度学习奠基人Yoshua Bengio教授发表于2003，虽年代久远，却意义非凡。</p><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>​    统计语言模型的目标是学习语言中的单词序列的联合概率函数，但因维度灾难(curse of dimensionality)，导致目标非常困难。维度灾难是指:模型测试时的单词序列很可能不同于训练时的单词序列（这样导致高纬度下的数据系数会导致很多单词序列的概率为0）。<span style="color:red;">传统但比较成功的基于n-grams的方法通通过拼接训练集中较短的重叠的序列来获得泛化能力。</span> 我们提出了一种通过学习单词的分布式表示的方法解决维度灾难问题，针对每一个训练语句，该方法可以传递给模型其指数数量级的语义相关/近邻的句子。本模型可同时学习（1）每个单词都学习到一个分布式表示（2）根据其分布式表示得到的单词序列的概率函数。获得泛化能力的原因在于若某个单词序列从未见过，但组成该序列的单词却与构成训练集中单词序列的单词相似（在有近邻表示的意义上），则该序列会得到较高的概率。在合理时间内训练一个大型模型（数百万参数）是非常大的挑战。本报告使用神经网络作为概率函数，并在两个文本语料中证明本方法极大提升当前最优的n-gram模型，并且本方法可以利用更长的上下文。</p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>​    语言模型或其他学习问题的一个根本性问题是维度灾难，尤其是对许多离散随机变量（比如语句中的单词、数据挖掘任务的离散属性）的联合概率分布建模时。比如，若某种自然语言词汇表大小$V$为100,000，若对包含10个连续单词的语句序列的联合分布建模，则参数有$100000^{10} - 1 = 10^{50} - 1$个。当建模连续变量时，可以比较容易获得泛化能力（比如，使用平滑类别函数例如多层神经网络MLP、高斯混合模型），因为期望的学习函数具有一些局部平滑特性。对于离散空间，泛化结构不明显，离散变量的任何变化都可能导致函数预测值的巨大影响，并且离散随机变量可取值很大，而大多数能观察到的对象相距很远（汉明距离）。</p><p>​    统计语言模型可表示为在给定前文时预测下一个单词的条件概率 $$\hat{P}(w^T_1) = \prod^T_{t=1} \hat{P}(w_t|w^{t-1}<em>1)$$ ，$w_t$表示第$t$个单词，子序列$w^j_i = (w_i, w</em>{i+1}, …, w_{j-1}, w_j)$。这类统计语言模型在很多设计自然语言的技术领域被证明有用，包括语音识别，机器翻译和信息检索。</p><p>​    当构建自然语言统计模型时，可利用词序极大地降低建模问题的复杂度，并且单词序列中相近的单词有更强的依赖性。因此，对大量上下文的每个上下文，<code>n-gram</code>模型构建了上下文和下一个单词的条件概率表，例如前$n-1$个单词的组合：$$\hat{p}(w_t|w^{t-1}<em>1) \approx \hat{p}(w_t|w^{t-1}</em>{t-n+1})$$，我们仅考虑在训练预料中真实存在或出现频率足够的连续单词的组合。但是若某个包含<code>n</code>个单词的单词序列未在训练预料中出现过怎么办？对于这种情况，并不能将其概率赋为$0$，因为这样的单词序列是很有可能会在更大的上下文中出现的。一个简单的方法是使用更小的上下文大小来预测其概率，正如论文back-off trigram model(Katz, 1987)以及smoothed(or interpolated) trigram models(Jelinek and Mercer, 1980)所示。因此，在这样的模型中，如何从训练预料中见过的单词序列中获得对新的单词序列的泛化能力呢？一种对此类模型获得泛化能力的理解是将此类interpolated或back-off n-gram模型思考为生成模型。最终，新的单词序列可通过“粘合(gluing)”训练语料中常见的较短、重叠的长度为1,2…到n个单词的序列块生成。在这种back-off或interpolated n-gram模型中，得到下一个单词的规则是隐式的。研究者在使用$n=3$，即trigrams中得到了state-of-art 结果，并且关于结合技巧来得到实质性改进的详细请看Goodman(2001). 显然，距离预测单词越近的前n个单词所包含的信息更多，但上述方法至少有两个方面值得改进，且本文也着重关注：1. 未考虑超过1或者2的更大的上下文；2. 未考虑单词间的相似度。比如，若训练语料中存在句子”The cat is walking in the bedroom”，则类似句子”A dog was running in a room”应该具有更高可能性，因为”dog”和”cat”(“the”和”a”, “room” 和”bedroom” 等等)在语义和语法上很相似。</p><p><strong>Contributions</strong></p><ol><li>提出单词的分布式表示，解决维度灾难问题</li><li>解决单词的长距离依赖限制，而ngram模型中一般$n=3$</li><li>词的相似关系，本论文中单词以分布式表示，能够表示单词间的相似性</li></ol><h3 id="1-1-Fighting-the-Curse-of-Dimensionality-with-Distributed-Representations"><a href="#1-1-Fighting-the-Curse-of-Dimensionality-with-Distributed-Representations" class="headerlink" title="1.1 Fighting the Curse of Dimensionality with Distributed Representations"></a>1.1 Fighting the Curse of Dimensionality with Distributed Representations</h3><p>​    简而言之，本文提出的方法可归纳为如下几点</p><ol><li>将词典中的每个词都关联到一个分布式的<em>word feature vector</em>（一个$\mathbb{R}^m$空间的实值向量）</li><li>单词序列中的联合<em>probability function</em>通过单词的特征向量表征</li><li>同时学习<em>word feature vectors</em>和<em>probability function</em>的参数</li></ol><p>​    单词的特征向量表征单词的不同方面：每个单词都关联到向量空间中的某个点。特征数目（比如m=30,60或者100）远小于词典大小（比如17000）。概率函数表示为在给定之前单词序列时，预测下一个单词的条件概率的乘积（比如实验中在给定先前单词时，采用了多层神经网络预测下一个单词）。概率函数的参数可被迭代调整以达到<strong>maxmize the log-likelihood of training data最大化训练数据的似然函数</strong>或者正则标准，比如增加一个权重衰减惩罚项。最后，每个单词的特征向量都可被学习，当然可采用语义特征的先验知识初始化。</p><p>​    该方法为什么有效呢？在先前例子所示，若<em>dog<em>和</em>cat*的语法和语义相似，并且</em>(the, a), (bedroom, room), (is, was), (running, walking)<em>也类似，则很自然的可从*</em>The cat is walking in the bedroom** 生成<strong>A dog was running in a room</strong>，并且类似的<strong>The cat is running in a room</strong>、<strong>A dog is walking in a bedroom</strong>等等等其他各种组合。本文提出的模型是可以泛化的，因为<strong>相似的</strong>单词期望拥有相似的特征向量，并且概率函数是特征向量的<em>smooth平滑</em>函数，即特征上的微小变化也只会引起概率的微小变化。因此，训练数据中的上述句子的出现会增加概率，当然不仅仅是上述句子，还包括其在语句空间中组合数目的<em>邻居</em>句子（通过特征向量表达的句子）</p><h3 id="1-2-Relation-to-Previous-Work"><a href="#1-2-Relation-to-Previous-Work" class="headerlink" title="1.2 Relation to Previous Work"></a>1.2 Relation to Previous Work</h3><p>略</p><h2 id="2-A-Neural-Model"><a href="#2-A-Neural-Model" class="headerlink" title="2. A Neural Model"></a>2. A Neural Model</h2><p>​    训练集是诸如$w_1 … w_T$的单词序列，其中单词$w_t \in V$，而词典$V$是一个巨大但有限的集合。目标是学习一个好模型<br>$$<br>f(w_t, …, w_{t-n+1}) = \hat{p}(w_t|w^{t-1}<em>1)<br>$$<br>下面，我们给出概率的几何倒数$\frac{1}{\hat{p}(w_t|w^{t-1}_1)}$，也被称为<em>perplexity困惑度</em>，也是平均负似然函数的指数。模型的唯一约束在于对于任何的$w^{t-1}_1$， $\sum^{|V|}</em>{i=1}f(i, w_{t-1}, …, w_{t-n+1}) = 1, f &gt; 0$，通过将这些条件概率相乘，得到单词序列的联合概率模型。</p><p>​    我们将函数$f(w_t, …, w_{t-n+1}=\hat{p}(w_t|w^{t-1}_1)$分解为两部分</p><ol><li><p>一个映射函数$C$， 它将词典$V$中的任意元素$i$映射为一个实值向量$C(i) \in \mathbb{R}^m$。它表示了词典中每个单词的<em>分布式特征向量 distributed feature vectors</em>。实际上，$C$是一个无参数的$|V| * m$的矩阵</p></li><li><p>一个由$C$表达的单词的概率函数：上下文单词的特征向量序列$(C(w_{t-n+1}), …, C(w_{t-1}))$作为函数$g$的输入，映射到词典$V$中下一个单词$w_t$的条件概率分布。函数$g$的输出是一个向量，其中第$i$-th 元素表示概率$\hat{p}(w_t = i|w^{t-1}<em>1)$ ，如图1所示<br>$$<br>f(i, w</em>{t-1}, …, w_{t-n+1}) = g(i, C(w_{t-1}), …, C(w_{t-n+1}))<br>$$</p></li></ol><p>函数$f$是上述两个映射($C$和$g$)的组合，并且$C$对于上下文中的所有单词都是共享参数的。这两部分都与一些参数有关，映射函数$C$的参数就是特征向量本身，表示为一个$|V|*m$的矩阵，其中第$i$行$C(i)$是单词$i$的特征向量。函数$g$可通过一个前向传播网络或RNN或其他参数化函数实现，参数为$\omega$。整体的参数集合为$\Theta = (C, \omega)$</p><p><img src="/img/A-Neural-Probabilistic-Language-Model/figure1.jpg" srcset="/img/loading.gif" alt=""></p><p>​    训练过程是寻找最大化训练语料的penalized log-likelihood的参数$\Theta$,<br>$$<br>L = \frac{1}{T}\sum_t log f(w_t, …, w_{t-n+1}; \Theta) + R(\Theta)<br>$$<br>其中$R(\Theta)$是正则化项，比如，在实验中，$R$是一个权重衰减惩罚项，只作用于神经网络的权重和矩阵$C$，不包括偏置项biases</p><p>​    在上述模型中，自由参数(free parameters)的数目只与词汇表大小$V$成线性关系。它也只与阶数$n$成线性关系：若引入更多共享参数结构，则比例因子可降为sub-linear次线性，比如使用time-decay神经网络或rnn（或两种网络的组合形式）</p><p>​    在如下大多数实验中，除了word features mapping外，神经网络只有一个隐藏层，并且可选性的，存在从word features到输出的直接连接。因此，实际上，神经网络有两个隐藏层：1. the shared word features layer C 即共享单词特征向量层$C$， 没有任何非线性能力（无实质作用）2. the ordinay hyperbolic tangent hidden layer即普通双曲正切隐藏层。更准确的讲，神经网络计算如下函数，使用<em>softmax</em>输出层，保证概率值为正，且和为1<br>$$<br>\hat{p}(w_t|w_{t-1}, …, w_{t-n+1}) = \frac{e^{y_{w_t}}}{\sum_i e^{y_i}}<br>$$<br>其中$y_i$是每个输出单词$i$的未归一化的log-概率，包含参数$b, W, U, d, H$的计算公式如下<br>$$<br>y = b + Wx + Utanh(d + Hx)<br>$$<br>其中，双曲正切tanh是element-by-element方式作用，$W$可选为0，表示无直接连接。$x$为word features layer单词特征向量层的激活向量，是矩阵$C$上的输入单词的特征向量的拼接向量<br>$$<br>x = (C(w_{t-1}), C(w_{t-2}), …, C(w_{t-n+1}))<br>$$<br>设$h$为隐藏层单元数目，$m$为每个单词的特征向量的维度数目。若不存在word features到输出的直接连接，则矩阵$W$为0.模型的自由参数是输出层偏置项$b$（包含$|V|$个元素），隐藏层偏置项$d$（包含$h$个元素），隐藏层到输出层的权重$U$（一个$|V| \times h$的矩阵），word features 到输出的权重$W$（一个$|V| \times (n-1)m$的矩阵），隐藏层权重$H$（一个$h \times (n-1)m$的矩阵），以及word features $C$（一个$|V| \times m$的矩阵）<br>$$<br>\Theta = (b, d, W, U, H, C)<br>$$<br>自由参数的数目是$|V|(1 + nm + h) + h(1 + (n-1)m)$。主导因子是$|V|(nm + h)$，注意在里乱上，若只对权重$W$和$H$而不包含$C$上存在权重衰减，则$W$和$H$会收敛到0，而$C$会继续增长，当然在实际中使用随机梯度上升不会存在这种现象。</p><p>​    在神经网络上执行随机梯度上升算法，则执行第t个单词的迭代更新公式如下<br>$$<br>\Theta \leftarrow \Theta + \epsilon \frac{\partial \hat{P}(w_t|w_{t-1}, …, w_{t-n+1})}{\partial \Theta}<br>$$<br>其中$\epsilon$表示学习率，注意大量的参数无需更新：对于大量单词$j$的$C(j)$单词特征没有出现在输入窗口中。</p><h2 id="3-Parallel-Implementation"><a href="#3-Parallel-Implementation" class="headerlink" title="3. Parallel Implementation"></a>3. Parallel Implementation</h2><p>略</p><h2 id="4-Experimental-Results"><a href="#4-Experimental-Results" class="headerlink" title="4. Experimental Results"></a>4. Experimental Results</h2><p>​    对比实验使用包含各种英语文本和书籍的共计1181041个单词的布朗语料库，前800000单词用作训练，接下来200000用作验证集（模型选择、权重衰减、early stopping），剩余181041用作测试。不同单词的数目有47578（包括标点符号、大小写以及文本段落标识符），将频率&lt;=3的稀有词合并为单个词，减小词表大小为$|V|=16383$</p><p>​    第二个实验使用1995到1996年的Associated Press(AP) News。训练集大约为1400万（13994528）单词，验证集约为100万（963138）单词，测试集也约为100万（963071）单词。原始数据共计148721单词（包括标点符号），减少为$|V|=17964$，处理方法是保留常用词（保留标点符号），大写转为小写，数字映射为特殊符号，稀有词及专有词映射为特殊符号</p><p>​    为了训练神经网络，初始学习率设为$\epsilon_o = 10^{-3}$（在使用多个小数据尝试后），并根据如下规则衰减$\epsilon_t = \frac{\epsilon_o}{1 + rt}$，t表示完成的参数更新次数，r表示参数衰减因子 $r = 10^{-8}$</p><h3 id="4-1-N-Gram-Models"><a href="#4-1-N-Gram-Models" class="headerlink" title="4.1 N-Gram Models"></a>4.1 N-Gram Models</h3><p>第一个对比模型是采用插值法（interpolated）或平滑法（smoothed）的trigram 模型（Jelinek and Mercer, 1980）。模型的条件概率为<br>$$<br>\hat{p}(w_t|w_{t-1}, w_{t-2}) = \alpha_0(q_t)p_0 + \alpha_1(q_t)p_1(w_t) + \alpha_2(q_t)p_2(w_t|w_{t-1}) + \alpha_3(q_t)p_3(w_t|w_{t-1},w_{t-2})<br>$$<br>其中条件权重$\alpha_i(q_t) \geq 0, \sum_i \alpha_i(q_t) = 1$，$p_0 = 1/|V|$， $p_1(i)$为unigram（单词$i$在训练集中的相对频率），$p_2(i|j)$为bigram（$\frac{词组(j,i)}{词(j)}$），$p_3(i|j,k)$ 为trigram（$\frac{词组(k,j,i)}{词(j,i)}$）.对每个离散值$q_t$都有混合权重$\alpha$，可通过EM算法经过大约5次迭代估算出。</p><h3 id="4-2-Results"><a href="#4-2-Results" class="headerlink" title="4.2 Results"></a>4.2 Results</h3><p>下图为不同模型在困惑度上的表现，可以看到神经网络模型表现最好</p><p><img src="/img/A-Neural-Probabilistic-Language-Model/table1-results.jpg" srcset="/img/loading.gif" alt=""></p><h2 id="5-Conclusion"><a href="#5-Conclusion" class="headerlink" title="5. Conclusion"></a>5. Conclusion</h2><p>​    实验作用在两个语料库中，一个超过100万数据，另一个超过1500万单词，都证明了本方法比state-of-art方法比如smoothed trigram优秀，困惑度低于10%到20%</p><p>​    我们坚信，主要原因在于利用了可学习的分布式表示来解决维度灾难，每个训练语句都存在相当的组合数目的其他邻居语句来训练模型</p><p>​    当然，模型还存在较多可改进之处，比如架构、计算性能、先验知识等，未来重点可放在改进加速技术，以及不增加训练时间的基础上增加容量（处理数亿个单词或更多）。利用时间结构扩展输入窗口以包含整个段落（无需增加参数数目或计算时间）的简单想法是使用time-delay或者rnn。</p><h2 id="6-参考"><a href="#6-参考" class="headerlink" title="6. 参考"></a>6. 参考</h2><ol><li><p><a href="https://www.cnblogs.com/Dream-Fish/p/3950024.html" target="_blank" rel="noopener">A Neural Probabilistic Language Model</a></p></li><li><p><a href="https://wmathor.com/index.php/archives/1442/" target="_blank" rel="noopener">NNLM 的 PyTorch 实现</a></p></li></ol><h2 id="7-代码实现"><a href="#7-代码实现" class="headerlink" title="7. 代码实现"></a>7. 代码实现</h2><p><a href="https://github.com/DreamExplorerX/NLP-Garden/tree/master/1-1.NNLM" target="_blank" rel="noopener">DreamExplorerX-nnlm</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Deep Learning</tag>
      
      <tag>NLP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++11伪随机数</title>
    <link href="/2020/07/14/C-11%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    <url>/2020/07/14/C-11%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="C-11-伪随机数"><a href="#C-11-伪随机数" class="headerlink" title="C++11 伪随机数"></a>C++11 伪随机数</h1><h2 id="C风格伪随机数生成"><a href="#C风格伪随机数生成" class="headerlink" title="C风格伪随机数生成"></a>C风格伪随机数生成</h2><p>旧版本C/C++使用<code>rand()</code>函数生成区间在<code>[0, RAND_MAX]</code>的伪随机数，其存在多种问题：无法满足多种应用程序对不同区间范围、不同数值类型或不同分布的需求。而编程人员在编写程序为了解决这些问题通常会转换 rand 生成的随机数的范围、类型或者是分布时，常常会引入非随机性。</p><h2 id="C-11新标准"><a href="#C-11新标准" class="headerlink" title="C++11新标准"></a>C++11新标准</h2><p>C++11新标准中提供了新的随机数生成库<code>&lt;random&gt;</code>来解决上述问题，<code>&lt;random&gt;</code>库主要通过<code>generator</code>和<code>distribution</code>的协作来生成随机数</p><ul><li><p>random_device类：可能产生真正的随机数，但依具体实现</p></li><li><p>random number engines(随机数生成引擎类): 负责生成原始随机数</p></li><li><p>random number distributions(随机数生成分布类): 使得生成的随机数满足统计学中的概率分布<br>STL预先指定了一系列的生成引擎，并且提供一个default_random_engine。default_random_engine会使用某个预定义的引擎，且不同编译器、不同平台的实现可能不同。</p></li></ul><h3 id="非确定性随机数"><a href="#非确定性随机数" class="headerlink" title="非确定性随机数"></a>非确定性随机数</h3><p>C++11标准提供了<code>random_device</code>类，有可能产生真正的随机数，依赖于具体实现有关。windows平台好像依赖于伪随机生成实现。<code>std::random_device</code>是一个非常简单和可靠的随机生成器。该实现是由标准强制执行的，至少在Boost中，它在任何地方都使用相同的代码，这是从原始的<code>std::mt19937</code>文件派生而来的。这个代码非常稳定，是跨平台的。您可以非常确信，在任何编译它的平台上，初始化它、从它进行查询等都将编译成类似的代码，并且您将获得类似的性能。</p><h3 id="随机数生成引擎"><a href="#随机数生成引擎" class="headerlink" title="随机数生成引擎"></a>随机数生成引擎</h3><p>C++11标准预先定义了多个算法的随机数生成引擎<br><img src="/img/c++11-predefined-random-number-engines.jpg" srcset="/img/loading.gif" alt=""></p><p>随机数生成引擎定义为函数对象类，即实现了<code>operator()</code>运算符函数，<code>operator()</code>运算符函数无参数，返回随机生成的<code>unsigned</code>数，随机数区间位于<code>[default_randm_engine::min, default_randm_engine::max]</code>可通过调用随机数引擎对象生成原始随机数。</p><pre><code class="hljs c++"><span class="hljs-built_in">std</span>::default_random_engine e;  <span class="hljs-comment">// 种子默认</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; e() &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 通过调用e()获得下一个随机数</span>&#125;</code></pre><h4 id="static-引擎和分布"><a href="#static-引擎和分布" class="headerlink" title="static 引擎和分布"></a>static 引擎和分布</h4><p>随机数生成引擎在同一初始状态下，会生成相同的随机数序列，这种特性适用于调试情况，若不希望这种情况，可将生成引擎和分布定义为<code>static</code>类型，保存其状态，这样多次调用就会不断使用前一个状态生成后续的序列。</p><p>注意，一个给定的随机数发生器已知会生成相同的随机数序列。一个函数如果定义了局部的随机数发生器，应该将其（包括引擎和分布对象）定义为 static 的。否则，每次调用函数都会生成相同的序列。</p><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bad_generator</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"bad engine: "</span>;default_random_engine bad_engine;<span class="hljs-function">uniform_int_distribution&lt;&gt; <span class="hljs-title">bad_distribution</span> <span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)</span></span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<span class="hljs-built_in">cout</span> &lt;&lt; bad_distribution(bad_engine) &lt;&lt; <span class="hljs-string">" "</span>;&#125;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">good_generator</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"good engine: "</span>;<span class="hljs-keyword">static</span> default_random_engine good_engine;<span class="hljs-function"><span class="hljs-keyword">static</span> uniform_int_distribution&lt;&gt; <span class="hljs-title">good_distribution</span> <span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)</span></span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<span class="hljs-built_in">cout</span> &lt;&lt; good_distribution(good_engine) &lt;&lt; <span class="hljs-string">" "</span>;&#125;<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;bad_generator();  <span class="hljs-comment">// 输出 bad engine: 1 2 8 5 6 3 1 7 7 10</span>bad_generator();  <span class="hljs-comment">// 输出 bad engine: 1 2 8 5 6 3 1 7 7 10</span><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"------------------"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;good_generator();  <span class="hljs-comment">// 输出 good engine: 1 2 8 5 6 3 1 7 7 10</span>good_generator();  <span class="hljs-comment">// 输出 good engine: 4 6 9 1 1 6 7 1 4 1</span><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h4 id="设置随机数种子"><a href="#设置随机数种子" class="headerlink" title="设置随机数种子"></a>设置随机数种子</h4><p>随机数生成引擎在同一初始状态下，会生成相同的随机数序列。可以通过设置种子使得其随机数序列不同。存在两种方法修改随机数种子</p><ul><li>定义随机数引擎类的构造函数</li><li>调用<code>seed</code>函数</li></ul><pre><code class="hljs c++">default_random_engine e1;<span class="hljs-comment">//默认的种子</span><span class="hljs-function">default_random_engine <span class="hljs-title">e2</span><span class="hljs-params">(<span class="hljs-number">100</span>)</span></span>;        <span class="hljs-comment">// 构造函数中设定种子</span> default_random_engine e3;  <span class="hljs-comment">// 默认种子</span>e3.seed(<span class="hljs-number">100</span>);  <span class="hljs-comment">// 设置种子</span></code></pre><p>关于种子，旧版本可能使用<code>time(NULL)</code>函数来设定种子，但<code>time</code>函数精度为秒，重复调用可能会生成相同的种子。这里可利用上文提到的<code>random_device</code>类的特性设置种子</p><pre><code class="hljs c++"><span class="hljs-built_in">std</span>::random_device rd;<span class="hljs-function"><span class="hljs-built_in">std</span>::default_random_engine <span class="hljs-title">e</span><span class="hljs-params">(rd())</span></span>;<span class="hljs-function"><span class="hljs-built_in">std</span>::uniform_int_distribution&lt;&gt; <span class="hljs-title">u</span><span class="hljs-params">(<span class="hljs-number">5</span>,<span class="hljs-number">20</span>)</span></span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;    <span class="hljs-built_in">cout</span> &lt;&lt; u(e) &lt;&lt; <span class="hljs-built_in">endl</span>;&#125;</code></pre><h3 id="随机分布"><a href="#随机分布" class="headerlink" title="随机分布"></a>随机分布</h3><p>类似引擎类型，分布类型也是函数对象类，实现了<code>operator()</code>函数分布类型处理随机数生成引擎生成的随机数，使其结果满足某种概率分布。</p><h4 id="均匀概率分布-默认类型"><a href="#均匀概率分布-默认类型" class="headerlink" title="均匀概率分布(默认类型)"></a>均匀概率分布(默认类型)</h4><pre><code class="hljs c++"><span class="hljs-built_in">std</span>::default_random_engine e;<span class="hljs-function"><span class="hljs-built_in">std</span>::uniform_int_distribution&lt;&gt; <span class="hljs-title">u</span><span class="hljs-params">(<span class="hljs-number">5</span>, <span class="hljs-number">20</span>)</span></span>;  <span class="hljs-comment">// 默认类型为unsigned，指定随机数范围区间[5, 10]</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; u(e) &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 传递引擎对象给分布对象，因为某些分布可能需要调用引擎多次才能产生一个值。</span>&#125;</code></pre><h4 id="均匀概率分布-实数类型"><a href="#均匀概率分布-实数类型" class="headerlink" title="均匀概率分布(实数类型)"></a>均匀概率分布(实数类型)</h4><pre><code class="hljs c++"><span class="hljs-built_in">std</span>::default_random_engine e;<span class="hljs-function"><span class="hljs-built_in">std</span>::uniform_real_distribution&lt;&gt; <span class="hljs-title">u</span><span class="hljs-params">(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)</span></span>;  <span class="hljs-comment">// 默认类型为double，指定随机数范围区间[0, 1]</span><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;  <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span> &lt;&lt; u(e) &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 传递引擎对象给分布对象，因为某些分布可能需要调用引擎多次才能产生一个值。</span>&#125;</code></pre><h4 id="其他非均匀分布"><a href="#其他非均匀分布" class="headerlink" title="其他非均匀分布"></a>其他非均匀分布</h4><p>比如伯努利分布、正态分布、抽样分布、泊松分布等。</p><p><img src="/img/c++11-predefined-random-number-distributions.jpg" srcset="/img/loading.gif" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://en.cppreference.com/w/cpp/numeric/random" target="_blank" rel="noopener">https://en.cppreference.com/w/cpp/numeric/random</a></p></li><li><p><a href="http://www.cplusplus.com/reference/random/" target="_blank" rel="noopener">http://www.cplusplus.com/reference/random/</a></p></li><li><p><a href="https://stackoverflow.com/questions/39288595/why-not-just-use-random-device" target="_blank" rel="noopener">Why not just use random_device?</a></p></li><li><p><a href="https://blog.csdn.net/qq_34784753/article/details/79600809" target="_blank" rel="noopener">【C++】c++ 11中的随机数 ——random</a></p></li><li><p><a href="https://blog.csdn.net/songshiMVP1/article/details/47016805" target="_blank" rel="noopener">C++11随机数发生器 VS rand()</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>C++11</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++11</tag>
      
      <tag>random</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/07/14/hello-world/"/>
    <url>/2020/07/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
